package com.huashe.pizz.bean.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import java.util.List;

import com.huashe.pizz.bean.ModuleProduct.ModuleProductBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "moduleproductbean".
*/
public class ModuleProductBeanDao extends AbstractDao<ModuleProductBean, String> {

    public static final String TABLENAME = "moduleproductbean";

    /**
     * Properties of entity ModuleProductBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Sort = new Property(0, String.class, "sort", false, "SORT");
        public final static Property Id = new Property(1, String.class, "id", true, "ID");
        public final static Property Image = new Property(2, String.class, "image", false, "IMAGE");
        public final static Property ImagePath = new Property(3, String.class, "imagePath", false, "IMAGE_PATH");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Price = new Property(5, String.class, "price", false, "PRICE");
        public final static Property Size = new Property(6, String.class, "size", false, "SIZE");
        public final static Property Subname = new Property(7, String.class, "subname", false, "SUBNAME");
        public final static Property Subtitle = new Property(8, String.class, "subtitle", false, "SUBTITLE");
        public final static Property Type = new Property(9, String.class, "type", false, "TYPE");
        public final static Property Itemtype = new Property(10, int.class, "itemtype", false, "ITEMTYPE");
        public final static Property Description = new Property(11, String.class, "description", false, "DESCRIPTION");
    }

    private DaoSession daoSession;

    private final ModuleProductBeanConverter descriptionConverter = new ModuleProductBeanConverter();

    public ModuleProductBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ModuleProductBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"moduleproductbean\" (" + //
                "\"SORT\" TEXT," + // 0: sort
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 1: id
                "\"IMAGE\" TEXT," + // 2: image
                "\"IMAGE_PATH\" TEXT," + // 3: imagePath
                "\"NAME\" TEXT," + // 4: name
                "\"PRICE\" TEXT," + // 5: price
                "\"SIZE\" TEXT," + // 6: size
                "\"SUBNAME\" TEXT," + // 7: subname
                "\"SUBTITLE\" TEXT," + // 8: subtitle
                "\"TYPE\" TEXT," + // 9: type
                "\"ITEMTYPE\" INTEGER NOT NULL ," + // 10: itemtype
                "\"DESCRIPTION\" TEXT);"); // 11: description
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"moduleproductbean\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ModuleProductBean entity) {
        stmt.clearBindings();
 
        String sort = entity.getSort();
        if (sort != null) {
            stmt.bindString(1, sort);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(3, image);
        }
 
        String imagePath = entity.getImagePath();
        if (imagePath != null) {
            stmt.bindString(4, imagePath);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(6, price);
        }
 
        String size = entity.getSize();
        if (size != null) {
            stmt.bindString(7, size);
        }
 
        String subname = entity.getSubname();
        if (subname != null) {
            stmt.bindString(8, subname);
        }
 
        String subtitle = entity.getSubtitle();
        if (subtitle != null) {
            stmt.bindString(9, subtitle);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(10, type);
        }
        stmt.bindLong(11, entity.getItemtype());
 
        List description = entity.getDescription();
        if (description != null) {
            stmt.bindString(12, descriptionConverter.convertToDatabaseValue(description));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ModuleProductBean entity) {
        stmt.clearBindings();
 
        String sort = entity.getSort();
        if (sort != null) {
            stmt.bindString(1, sort);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(3, image);
        }
 
        String imagePath = entity.getImagePath();
        if (imagePath != null) {
            stmt.bindString(4, imagePath);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(6, price);
        }
 
        String size = entity.getSize();
        if (size != null) {
            stmt.bindString(7, size);
        }
 
        String subname = entity.getSubname();
        if (subname != null) {
            stmt.bindString(8, subname);
        }
 
        String subtitle = entity.getSubtitle();
        if (subtitle != null) {
            stmt.bindString(9, subtitle);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(10, type);
        }
        stmt.bindLong(11, entity.getItemtype());
 
        List description = entity.getDescription();
        if (description != null) {
            stmt.bindString(12, descriptionConverter.convertToDatabaseValue(description));
        }
    }

    @Override
    protected final void attachEntity(ModuleProductBean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
    }    

    @Override
    public ModuleProductBean readEntity(Cursor cursor, int offset) {
        ModuleProductBean entity = new ModuleProductBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // sort
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // image
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // imagePath
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // price
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // size
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // subname
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // subtitle
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // type
            cursor.getInt(offset + 10), // itemtype
            cursor.isNull(offset + 11) ? null : descriptionConverter.convertToEntityProperty(cursor.getString(offset + 11)) // description
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ModuleProductBean entity, int offset) {
        entity.setSort(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImage(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setImagePath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPrice(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSize(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSubname(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSubtitle(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setType(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setItemtype(cursor.getInt(offset + 10));
        entity.setDescription(cursor.isNull(offset + 11) ? null : descriptionConverter.convertToEntityProperty(cursor.getString(offset + 11)));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ModuleProductBean entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(ModuleProductBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ModuleProductBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
