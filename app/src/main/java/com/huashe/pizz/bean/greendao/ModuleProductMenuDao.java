package com.huashe.pizz.bean.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.huashe.pizz.bean.ModuleProduct.ModuleProductMenu;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "moduleproductmenu".
*/
public class ModuleProductMenuDao extends AbstractDao<ModuleProductMenu, String> {

    public static final String TABLENAME = "moduleproductmenu";

    /**
     * Properties of entity ModuleProductMenu.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Sort = new Property(1, String.class, "sort", false, "SORT");
        public final static Property Icon1 = new Property(2, String.class, "icon1", false, "ICON1");
        public final static Property Icon2 = new Property(3, String.class, "icon2", false, "ICON2");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Parentid = new Property(5, String.class, "parentid", false, "PARENTID");
    }

    private DaoSession daoSession;


    public ModuleProductMenuDao(DaoConfig config) {
        super(config);
    }
    
    public ModuleProductMenuDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"moduleproductmenu\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"SORT\" TEXT," + // 1: sort
                "\"ICON1\" TEXT," + // 2: icon1
                "\"ICON2\" TEXT," + // 3: icon2
                "\"NAME\" TEXT," + // 4: name
                "\"PARENTID\" TEXT);"); // 5: parentid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"moduleproductmenu\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ModuleProductMenu entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String sort = entity.getSort();
        if (sort != null) {
            stmt.bindString(2, sort);
        }
 
        String icon1 = entity.getIcon1();
        if (icon1 != null) {
            stmt.bindString(3, icon1);
        }
 
        String icon2 = entity.getIcon2();
        if (icon2 != null) {
            stmt.bindString(4, icon2);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String parentid = entity.getParentid();
        if (parentid != null) {
            stmt.bindString(6, parentid);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ModuleProductMenu entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String sort = entity.getSort();
        if (sort != null) {
            stmt.bindString(2, sort);
        }
 
        String icon1 = entity.getIcon1();
        if (icon1 != null) {
            stmt.bindString(3, icon1);
        }
 
        String icon2 = entity.getIcon2();
        if (icon2 != null) {
            stmt.bindString(4, icon2);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String parentid = entity.getParentid();
        if (parentid != null) {
            stmt.bindString(6, parentid);
        }
    }

    @Override
    protected final void attachEntity(ModuleProductMenu entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ModuleProductMenu readEntity(Cursor cursor, int offset) {
        ModuleProductMenu entity = new ModuleProductMenu( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sort
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // icon1
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // icon2
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // parentid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ModuleProductMenu entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSort(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIcon1(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIcon2(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setParentid(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ModuleProductMenu entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(ModuleProductMenu entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ModuleProductMenu entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
